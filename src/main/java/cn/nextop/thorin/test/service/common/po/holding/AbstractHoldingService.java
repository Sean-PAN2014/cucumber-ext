package cn.nextop.thorin.test.service.common.po.holding;

import static org.assertj.core.api.Assertions.assertThat;

import org.springframework.beans.factory.annotation.Autowired;

import cn.nextop.thorin.common.glossary.Versionable;
import cn.nextop.thorin.common.persistence.jpa.PersistentObject;
import cn.nextop.thorin.core.holding.HoldingStrategyAdministrator;
import cn.nextop.thorin.test.service.common.po.AbstractPoService;
import cn.nextop.thorin.test.util.TestUtils;

public abstract class AbstractHoldingService<P extends Versionable & PersistentObject> extends  AbstractPoService<Integer, P> {

	@Autowired
	protected HoldingStrategyAdministrator admin;
	
	public AbstractHoldingService() {
		this.getNullable = true;
	}
	
	@Override
	protected void updateAssert(P result, P input) {
		assertThat(result).isEqualToIgnoringGivenFields(input, TestUtils.IGNORE_FIELDS_WITH_ID);
	}

	public final P insert(P input) {
		assertThat(this.getId(input)).as("Id has to be 0 as Id is generated by server.").isEqualTo(0);
		TestUtils.setCommonForInsert(input);
		// update
		P result = this.doUpdate(input);
		// assert return
		assertThat(result).isNotNull();
		this.updateAssert(result, input);
		// assert reselect
		P reselect = this.get(this.getId(result));
		assertThat(reselect).isNotNull();
		this.updateAssert(reselect, input);
		return result;
	}
	
	@Override
	public P update(P input) {
		assertThat(this.getId(input)).as("For Update, Id should have a value.").isNotEqualTo(0);
		return super.update(input);
	}
	
}
